import hashlib
import socket
import sys
from collections import defaultdict

# Constants
MD5_HASH = "4839d730994228d53f64f0dca6488f8d"
KNOWN_PREFIX = b'grey{'
MAX_OPENS = 100
TIMEOUT = 5

def recv_until_prompt(sock):
    data = b''
    while True:
        chunk = sock.recv(4096)
        if not chunk:
            break
        data += chunk
        if b'>' in data:
            break
    return data.decode()

def main():
    if len(sys.argv) < 3:
        print(f"Usage: {sys.argv[0]} <host> <port>")
        sys.exit(1)

    host = sys.argv[1]
    port = int(sys.argv[2])

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(TIMEOUT)
            print(f"[*] Connecting to {host}:{port}...")
            s.connect((host, port))
            print("[+] Connection established")

            # Get initial prompt
            recv_until_prompt(s)

            def send_command(cmd):
                s.sendall(cmd.encode() + b'\n')
                response = recv_until_prompt(s)
                return response

            # Get initial state (T0)
            print("[*] Getting initial state T0...")
            response = send_command('2')
            
            # Parse response
            if 'Result:' in response:
                hex_str = response.split('Result: ')[1].split('\n')[0].strip()
                try:
                    T0 = bytes.fromhex(hex_str)
                    print(f"[+] T0 collected: {T0.hex()}")
                except ValueError:
                    print("[-] Invalid hex string in response")
                    sys.exit(1)
            else:
                print("[-] Unexpected response format:")
                print(response)
                sys.exit(1)

            # Collect multiple opens
            print(f"[*] Collecting {MAX_OPENS} opens...")
            T_list = []
            for i in range(MAX_OPENS):
                response = send_command('2')
                if 'Result:' in response:
                    hex_str = response.split('Result: ')[1].split('\n')[0].strip()
                    try:
                        T_list.append(bytes.fromhex(hex_str))
                        if (i+1) % 10 == 0:
                            print(f"[+] Collected {i+1} opens")
                    except ValueError:
                        print(f"[-] Invalid hex at open {i}")
                        continue
                else:
                    print(f"[-] Bad response at open {i}")
                    continue

            # Build position sets
            print("[*] Building position sets...")
            S = [set() for _ in range(64)]
            for t in T_list:
                for j in range(64):
                    S[j].add(t[j])

            # Recover XOR mask
            print("[*] Recovering XOR mask...")
            x = [0] * 64
            for j in range(len(KNOWN_PREFIX)):
                x[j] = T0[j] ^ KNOWN_PREFIX[j]

            # Recover remaining bytes
            for j in range(5, 64):
                count = defaultdict(int)
                for a in S[0]:
                    for b in S[j]:
                        count[a ^ b] += 1
                best_d = max(count.items(), key=lambda x: x[1])[0]
                x[j] = x[0] ^ best_d

            # Reconstruct flag
            flag = bytes(T0[i] ^ x[i] for i in range(64))
            
            # Validate flag
            print("[*] Verifying flag...")
            if hashlib.md5(flag).hexdigest() == MD5_HASH:
                print(f"[+] Success! Flag: {flag.decode()}")
            else:
                print("[-] Failed to recover valid flag")
                print(f"Expected MD5: {MD5_HASH}")
                print(f"Actual MD5: {hashlib.md5(flag).hexdigest()}")

    except Exception as e:
        print(f"[-] Error: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    main()
